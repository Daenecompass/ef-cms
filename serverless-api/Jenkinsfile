pipeline {
  agent any

  environment {
    SPAWN_WRAP_SHIM_ROOT = "/home/tomcat"
    npm_config_cache = "/home/tomcat"
    HOME = "/home/tomcat" // needed to running 'npm i' on docker without being root
    CYPRESS_CACHE_FOLDER = "/home/tomcat/cypress_cache" // needed to be able to run cypress without being root
    SLS_DEPLOYMENT_BUCKET = ""
  }

  options { buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3')) }

  stages {
    stage('Merge') {
      steps {
        script {
          if (env.target_sha1) {
            // todo: there is probably a better way to have Jenkins do this for us automatically
            sh 'git config user.name "EF-CMS Jenkins"'
            sh 'git config user.email "noop@example.com"'
            sh "git merge origin/${env.target_sha1}"
          }
        }
      }
    }
    stage('Setup') {
      steps {
        script {
          def runner = docker.build 'setup', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat') {
            dir('serverless-api') {
              sh 'npm i'
            }
          }
        }
      }
    }
    stage('Lint') {
      steps {
        script {
          def runner = docker.build 'lint', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat') {
            dir('serverless-api') {
              sh 'npm run lint'
            }
          }
        }
      }
    }
    stage('Test') {
      steps {
        script {
          def runner = docker.build 'test', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat') {
            dir('serverless-api') {
              sh 'npm run test'
            }
          }
        }
      }
      post {
        success {
          dir('serverless-api') {
            publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          }
        }
      }
    }
    stage('Deploy Pre Prod') {
      when {
        expression {
          env.branch_name == 'PR-14'
        }
      }
      steps {
        script {
          def targets = [
            [env: 'dev', regions: ['us-east-1']],
          ]
          def tasks = createDeployTasks targets
          parallel tasks
        }
      }
    }
    stage('Deploy Prod') {
      when {
        expression {
          env.branch_name == 'master'
        }
      }
      steps {
        script {
          def targets = [
            [env: 'prod', regions:['us-east-1']],
          ]
          def tasks = createDeployTasks targets
          parallel tasks
        }
      }
    }
  }
}

def createDeployTasks(targets) {
  def deployTasks = [:]
  targets.each { deploy ->
    def slsStage = deploy.env
    deploy.regions.each { region ->
      deployTasks["${slsStage} - ${region}"] = {
        node() {
          stage("deploy ${slsStage} - ${region}") {
            checkout scm
          def trunner = docker.build 'terraform', '-f serverless-api/Dockerfile.terraform .'
          trunner.inside() {
            dir("serverless-api/terraform/${slsStage}") {
              echo 'Running Terraform'
              sh "rm -rf ./.terraform/"
              sh "terraform init"
              sh "terraform apply -auto-approve"

              script {
                echo 'Setting environment variables based on Terraform run'
                def bucket = sh(script: "terraform output sls_deployment_bucket", returnStdout: true).trim()
                env.SLS_DEPLOYMENT_BUCKET = bucket
              }
            }
          }
          def runner = docker.build 'serverless', '-f serverless-api/Dockerfile.serverless .'
          runner.inside('-v /home/tomcat:/home/tomcat -v /etc/passwd:/etc/passwd') {
            dir('serverless-api') {
              sh 'npm i'
              sh 'chmod -R ugo+r .' // TODO: is this actually needed

              // not sure if I really need this....
              // sh "./node_modules/.bin/sls create_domain --stage ${slsStage} --region ${region} --verbose"
              sh "ENVIRONMENT=${slsStage} SLS_DEPLOYMENT_BUCKET=${env.SLS_DEPLOYMENT_BUCKET} ./node_modules/.bin/sls deploy --stage ${slsStage} --region ${region} --verbose"
              sh "ENVIRONMENT=${slsStage} REGION=${region} ./configure-api-gateway-logging.sh"
            }
          }
          }
        }
      }
    }
  }
  return deployTasks
}
