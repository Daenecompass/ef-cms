pipeline {
  agent any

  options { buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3')) }

  stages {
    stage('Setup') {
      steps {
        script {
          def runner = docker.build 'setup', '-f server/Dockerfile.test .'
          runner.inside() {
            dir('server') {
              sh 'npm i'
            }
          }
        }
      }
    }
    stage('Lint') {
      steps {
        script {
          def runner = docker.build 'lint', '-f server/Dockerfile.test .'
          runner.inside() {
            dir('server') {
              sh 'npm run lint'
            }
          }
        }
      }
    }
    stage('Test') {
      steps {
        script {
          def runner = docker.build 'test', '-f server/Dockerfile.test .'
          runner.inside() {
            dir('server') {
              sh 'npm run test'
            }
          }
        }
      }
      post {
        success {
          dir('server') {
            publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          }
        }
      }
    }
    stage('Deploy Pre Prod') {
      when {
        branch 'develop'
      }
      steps {
        script {
          def targets = [
            [env: 'dev', regions: ['us-east-1']],
          ]
          def tasks = createDeployTasks targets
          parallel tasks
        }
      }
    }
    stage('Deploy Prod') {
      when {
        branch 'master'
      }
      steps {
        script {
          def targets = [
            [env: 'prod', regions:['us-east-1']],
          ]
          def tasks = createDeployTasks targets
          parallel tasks
        }
      }
    }
  }
}

def createDeployTasks(targets) {
  def deployTasks = [:]
  targets.each { deploy ->
    def slsStage = deploy.env
    deploy.regions.each { region ->
      deployTasks["${slsStage} - ${region}"] = {
        node() {
          stage("deploy ${slsStage} - ${region}") {
            checkout scm
            def runner = docker.build 'serverless', '-f server/Dockerfile.serverless .'
            runner.inside() {
              dir('server') {
                sh 'npm i'
                // sh 'chmod -R ugo+r .' // TODO: is this actually needed
                // not sure if I really need this....
                // sh "./node_modules/.bin/sls create_domain --stage ${slsStage} --region ${region} --verbose"
                sh "./node_modules/.bin/sls deploy --stage ${slsStage} --region ${region} --verbose"
                sh "ENVIRONMENT=${slsStage} REGION=${region} ./configure-api-gateway-logging.sh"
              }
            }
          }
        }
      }
    }
  }
  return deployTasks
}
