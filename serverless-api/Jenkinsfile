pipeline {
  agent any

  environment {
    SPAWN_WRAP_SHIM_ROOT = "/home/tomcat"
    npm_config_cache = "/home/tomcat"
    HOME = "/home/tomcat" // needed to running 'npm i' on docker without being root
    CYPRESS_CACHE_FOLDER = "/home/tomcat/cypress_cache" // needed to be able to run cypress without being root
  }

  options { buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3')) }

  stages {
    stage('Merge') {
      steps {
        script {
          if (env.branch_name != 'develop' && env.branch_name != 'master' && env.target_sha1) {
            // todo: there is probably a better way to have Jenkins do this for us automatically
            sh 'git config user.name "EF-CMS Jenkins"'
            sh 'git config user.email "noop@example.com"'
            sh "git merge origin/${env.target_sha1}"
          }
        }
      }
    }
    stage('Setup') {
      steps {
        script {
          def runner = docker.build 'setup', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat -v /etc/passwd:/etc/passwd') {
            dir('serverless-api') {
              sh 'npm i'
            }
          }
        }
      }
    }
    stage('Audit') {
      steps {
        script {
          def runner = docker.build 'setup', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat') {
            dir('serverless-api') {
              sh 'npm audit'
            }
          }
        }
      }
    }
    stage('Lint') {
      steps {
        script {
          def runner = docker.build 'lint', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat') {
            dir('serverless-api') {
              sh 'npm run lint'
            }
          }
        }
      }
    }
    stage('Test') {
      steps {
        script {
          def runner = docker.build 'test', '-f serverless-api/Dockerfile.test .'
          runner.inside('-v /home/tomcat:/home/tomcat') {
            dir('serverless-api') {
              sh 'npm run test'
            }
          }
        }
      }
      post {
        success {
          dir('serverless-api') {
            publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          }
        }
      }
    }
    stage('SonarQube') {
      steps {
        script {
          withCredentials([string(credentialsId: 'EF_CMS_API_SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
            def runner = docker.build 'sonar', '-f serverless-api/Dockerfile.sonar .'
            runner.inside("-e GIT_SSH_COMMAND='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' -e AWS_DEFAULT_REGION=us-east-1 -v /etc/passwd:/etc/passwd") {
              sshagent(credentials: ['github']) {
                dir('management/management') {
                  sh './deploy-init.sh'
                }
                dir('serverless-api') {
                  sh './verify-sonarqube-passed.sh'
                }
              }
            }
          }
        }
      }
    }
    stage('Deploy Pre Prod') {
      when {
        expression {
          env.branch_name == 'develop'
        }
      }
      steps {
        script {
          def targets = [
            [env: 'dev', regions: ['us-east-1']],
          ]
          def tasks = createDeployTasks targets
          parallel tasks
        }
      }
    }
    stage('Deploy Prod') {
      when {
        expression {
          env.branch_name == 'master'
        }
      }
      steps {
        script {
          def targets = [
            [env: 'prod', regions:['us-east-1']],
          ]
          def tasks = createDeployTasks targets
          parallel tasks
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}

def createDeployTasks(targets) {
  def deployTasks = [:]
  targets.each { deploy ->
    def slsStage = deploy.env
    deploy.regions.each { region ->
      deployTasks["${slsStage} - ${region}"] = {
        node() {
          stage("terraform ${slsStage} - ${region}") {
            checkout scm
            def trunner = docker.build 'terraform', '-f serverless-api/Dockerfile.deploy .'
            trunner.inside() {
              dir("serverless-api/terraform/${slsStage}") {
                echo 'Running Terraform'
                sh "rm -rf ./.terraform/"
                sh "terraform init"
                sh "terraform apply -auto-approve"

                script {
                  echo 'Setting environment variables based on Terraform run'
                  SLS_DEPLOYMENT_BUCKET = sh(script: "terraform output sls_deployment_bucket", returnStdout: true).trim()
                }
              }
            }
          }
          stage("serverless ${slsStage} - ${region}") {
            def runner = docker.build 'serverless', '-f serverless-api/Dockerfile.deploy .'
            runner.inside('-v /home/tomcat:/home/tomcat -v /etc/passwd:/etc/passwd') {
              dir('serverless-api') {
                dir('./src') {
                  echo 'Fix file permissions'
                  sh 'find . -type f -exec chmod -R ugo+r {} ";"'
                }
                echo 'Build main site distribution'
                // sh "./node_modules/.bin/sls create_domain --stage ${slsStage} --region ${region} --verbose"
                sh "ENVIRONMENT=${slsStage} SLS_DEPLOYMENT_BUCKET=${SLS_DEPLOYMENT_BUCKET} ./node_modules/.bin/sls deploy --stage ${slsStage} --region ${region} --verbose"
                sh "ENVIRONMENT=${slsStage} REGION=${region} ./configure-api-gateway-logging.sh"
              }
            }
          }
          stage("smoketest ${slsStage} - ${region}") {
            def runner = docker.build 'serverless', '-f serverless-api/Dockerfile.deploy .'
            runner.inside('-v /home/tomcat:/home/tomcat -v /etc/passwd:/etc/passwd') {
              dir('serverless-api') {
                echo 'Running smoke test'
                def restApiId=sh(script: "aws apigateway get-rest-apis --region=${REGION} --query \"items[?name=='${ENVIRONMENT}-ef-cms'].id\" --output text)"
                sh("API_REGION=${region}.trim() API_STAGE=${slsStage} API_TARGET=${restApiId.trim()} ./node_modules/.bin/artillery run ./smokeTest.yaml --output ./coverage/artillery_smoke_test.json")
                sh("./node_modules/.bin/artillery report -o ./coverage/smokeTestReport.html ./coverage/artillery_smoke_test.json")
              }
            }
          }
        }
      }
    }
  }
  return deployTasks
}
