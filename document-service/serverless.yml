service: ef-cms
plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-split-stacks
  # - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-aws-documentation
  - serverless-plugin-aws-alerts
  - serverless-offline
custom:
  s3:
    host: 0.0.0.0
    port: 9000
    directory: /tmp
    # Uncomment the first line only if you want to use cors with specified policy
    # Uncomment the second line only if you don't want to use cors
    # Not uncomment the these lines only if your wanto use cors with default policy
    # cors: relative/path/to/your/cors/policy/xml
    # cors: false
    # Uncomment only if you already have a S3 server running locally
    # noStart: true
  dynamodb:
    start:
      inMemory: true
      migrate: true
      port: 8000
      seed: false
    # seed:
    #   test:
    #     sources:
    #     - table: ${self:provider.environment.DOCUMENTS_DYNAMODB_TABLE}
    #       sources:
    #         - ./spec/fixtures/stuff.json

  alerts:
    stages:
      - dev
      - stg
      - prod
    dashboards: true
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  documentation:
    api:
      info:
        version: '2'
        title: Example API
        description: Some example API
        termsOfService: https://www.google.com
        contact:
          name: The contact person
          url: https://www.serverless.com/framework
          email: some-fake@email.com
        license:
          name: The license
          url: https://www.github.com
      tags:
        -
          name: Tag1
          description: The first tag
        -
          name: Tag2
          description: That other tag that we all love
    models:
      -
        name: HelloWorldResponse
        contentType: "application/json"
        schema:
          type: string

  # customDomain:
  #   domainName: api-${self:provider.stage}.${self:service}.flexion.us
  #   basePath: ''
  #   certificateName: api-${self:provider.stage}.ustc-case-mgmt.flexion.us
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  #   enabled: true
  splitStacks:
    perFunction: true
    perType: false
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  vars: ${file(./config/${self:custom.stage}.yml)}

provider:
  name: aws
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  runtime: nodejs8.10
  memorySize: 128
  timeout: 10
  logRetentionInDays: 7
  # role: ${self:custom.vars.role}
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    serverSideEncryption: AES256

  environment:
    S3_ENDPOINT: ${self:custom.vars.s3Endpoint}
    DOCUMENTS_BUCKET_NAME: efcms-documents-${opt:stage}-${opt:region}
    DOCUMENTS_DYNAMODB_TABLE: efcms-documents-${opt:stage}
    DYNAMODB_ENDPOINT: ${self:custom.vars.dynamodbEndpoint}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
       - dynamodb:BatchWriteItem
      Resource:
        - { "Fn::GetAtt": ["DocumentsDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [
            { "Fn::GetAtt": ["DocumentsDynamoDBTable", "Arn" ] }, "index", "DocketNumberIndex"
          ]]}

package:
  exclude:
    - ./**
  include:
    - src/documents/createDocument.js
    - src/swagger.js
    - swagger.json
    - src/package.json
    - src/node_modules/**

  excludeDevDependencies: true

resources:
  Resources:
    DocumentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.DOCUMENTS_BUCKET_NAME}
    DocumentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: documentId
            AttributeType: S
        KeySchema:
          - AttributeName: documentId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.vars.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.vars.writeCapacityUnits}
        TableName: ${self:provider.environment.DOCUMENTS_DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    #####
    # Begin Stage for API Gateway Logging
    #####
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage}
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true
functions:
  createPolicyUrl:
    handler: src/documents/createPolicyUrl.create
    events:
      - http:
          path: v1/documents/policy
          method: get

  createDocument:
    handler: src/documents/createDocument.create
    events:
      - http:
          path: v1/documents
          method: post
#          cors: true

#  getDocument:
#    handler: src/documents/getDocument.handler
#    documentation:
#      summary: retrieves a document by document id
#      tags:
#        - documents
#      description: >
#        Retrieve a document by document id.
#      # queryParams:
#      #   -
#      #     name: firstParam
#      #     description: The first param that we want, you MUST pass it
#      #     required: true
#      #   -
#      #     name: secondParam
#      #     description: The second param. This one is optional
#      methodResponses:
#        -
#          statusCode: '200'
#          responseModels:
#            "application/json": HelloWorldResponse
#          # responseHeaders:
#          #   -
#          #     name: link
#          #     description: describes other actions that can be taken
#          #     type: string
#    events:
#      - http:
#          path: v1/hello
#          method: get
#          cors: true

  swagger:
    handler: src/swagger/swagger.handler
    events:
      - http:
          path: v1/swagger
          method: get
          cors: true