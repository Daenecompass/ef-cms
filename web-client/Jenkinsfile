pipeline {

  agent any

  environment {
    HOME = '.' // needed to running 'npm i' on docker without being root
    CYPRESS_CACHE_FOLDER = './cypress_cache' // needed to be able to run cypress without being root
  }

  options { buildDiscarder(logRotator(daysToKeepStr: '3', artifactDaysToKeepStr: '3')) }

  stages {
    stage('sonarqube') {
      steps {
        script {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_PASSWORD')]) {
            def runner = docker.build 'sonar', '-f web-client/Dockerfile.sonar ..'
            runner.inside("-e GIT_SSH_COMMAND='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' -e AWS_DEFAULT_REGION=us-east-1 -v /etc/passwd:/etc/passwd") {
              sshagent(credentials: ['github']) {
                dir('management/management') {
                  sh './deploy-init.sh'
                }
                dir('web-client') {
                  def SONAR_URL = sh(returnStdout: true, script: 'cd ../management/management && terraform output sonarqube_url')
                  def FULL_URL = "https://${SONAR_URL}"
                  sh "sonar-scanner -Dsonar.projectBaseDir=. -Dsonar.login=admin -Dsonar.password=${SONAR_PASSWORD} -Dsonar.host.url=${FULL_URL}"
                }
              }
            }
          }
        }
      }
    }
    stage('Build') {
      steps {
        script {
          def runner = docker.build 'test', '-f web-client/Dockerfile.test .'
          runner.inside() {
            dir('web-client') {
              sh 'npm i'
              sh 'npm run lint'
              sh 'npm run test'
            }
          }
        }
      }
      post {
        success {
          dir('web-client') {
            publishHTML allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'artifacts/coverage', reportFiles: 'index.html', reportName: 'Code Coverage Report', reportTitles: ''
          }
        }
      }
    }
    stage('Terraform - Dev') {
      when {
        branch 'develop'
      }
      steps {
        script {
          def runner = docker.build 'terraform', '-f web-client/Dockerfile.terraform .'
          runner.inside() {
            dir('web-client/terraform/dev') {
              sh './deploy-app.sh -a'
            }
          }
        }
      }
    }
    stage('Deploy dev') {
      when {
        branch 'develop'
      }
      steps {
        deployTo('dev')
      }
    }
    stage('Terraform - Prod') {
      when {
        branch 'master'
      }
      steps {
        script {
          def runner = docker.build 'terraform', '-f web-client/Dockerfile.terraform .'
          runner.inside() {
            dir('web-client/terraform/prod') {
              sh './deploy-app.sh -a'
            }
          }
        }
      }
    }
    stage('Deploy prod') {
      when {
        branch 'master'
      }
      steps {
        deployTo('prod')
      }
    }
  }
  post {
    always {
      deleteDir()
    }
  }
}

def deployTo(env) {
  def runner = docker.build 'deploy', '-f web-client/Dockerfile.terraform .'
  runner.inside() {
    dir('web-client') {
      sh 'npm i'
      sh 'npm run dist'
      def bucket = sh(returnStdout: true, script: "cd terraform/${env} && terraform output bucket")
      s3Upload(
        bucket: "${bucket}",
        file: 'dist',
        path: "",
        cacheControl: 'no-cache'
      )
    }
  }
}
